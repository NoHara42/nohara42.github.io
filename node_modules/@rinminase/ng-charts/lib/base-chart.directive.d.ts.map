{"version":3,"file":"base-chart.directive.d.ts","sources":["base-chart.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { DoCheck, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from \"@angular/core\";\nimport * as chartJs from \"chart.js\";\nimport { DatasetColor } from \"./color\";\nimport { ThemeService } from \"./theme.service\";\nexport declare type SingleDataSet = number[] | chartJs.ChartPoint[];\nexport declare type MultiDataSet = (number[] | chartJs.ChartPoint[])[];\nexport declare type SingleOrMultiDataSet = SingleDataSet | MultiDataSet;\nexport declare type PluginServiceGlobalRegistrationAndOptions = chartJs.PluginServiceGlobalRegistration & chartJs.PluginServiceRegistrationOptions;\nexport declare type SingleLineLabel = string;\nexport declare type MultiLineLabel = string[];\nexport declare type ChartLabel = SingleLineLabel | MultiLineLabel;\nexport declare type ChartColor = DatasetColor[];\nexport declare type ChartType = chartJs.ChartType;\nexport declare type ChartDataset = chartJs.ChartDataSets;\nexport declare type ChartDatasets = chartJs.ChartDataSets[];\nexport declare type ChartOptions = chartJs.ChartOptions;\nexport declare class BaseChartDirective implements OnDestroy, OnChanges, OnInit, OnDestroy, DoCheck {\n    private element;\n    private themeService;\n    data: SingleOrMultiDataSet;\n    datasets: ChartDatasets;\n    labels: ChartLabel[];\n    options: ChartOptions;\n    chartType: ChartType;\n    colors: DatasetColor[];\n    legend: boolean;\n    plugins: PluginServiceGlobalRegistrationAndOptions[];\n    chartClick: EventEmitter<{\n        event?: MouseEvent;\n        active?: {}[];\n    }>;\n    chartHover: EventEmitter<{\n        event: MouseEvent;\n        active: {}[];\n    }>;\n    ctx: string;\n    chart: Chart;\n    private old;\n    private subs;\n    /**\n     * Register a plugin.\n     */\n    static registerPlugin(plugin: PluginServiceGlobalRegistrationAndOptions): void;\n    static unregisterPlugin(plugin: PluginServiceGlobalRegistrationAndOptions): void;\n    constructor(element: ElementRef, themeService: ThemeService);\n    ngOnInit(): void;\n    private themeChanged;\n    ngDoCheck(): void;\n    copyLabel(a: ChartLabel): ChartLabel;\n    labelsEqual(a: ChartLabel, b: ChartLabel): boolean;\n    copyColor(a: DatasetColor): DatasetColor;\n    colorsEqual(a: DatasetColor, b: DatasetColor): boolean;\n    updateColors(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    update(duration?: any): {};\n    hideDataset(index: number, hidden: boolean): void;\n    isDatasetHidden(index: number): boolean;\n    toBase64Image(): string;\n    getChartConfiguration(): chartJs.ChartConfiguration;\n    getChartBuilder(ctx: string): Chart;\n    smartMerge(options: any, overrides: any, level?: number): any;\n    private isMultiLineLabel;\n    private joinLabel;\n    private propagateDatasetsToData;\n    private propagateDataToDatasets;\n    private isMultiDataSet;\n    private getDatasets;\n    private refresh;\n}\n"]}