import * as tslib_1 from "tslib";
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { AfterViewInit, Directive, ElementRef, EventEmitter, Inject, Input, NgZone, OnDestroy, OnInit, Output, PLATFORM_ID } from '@angular/core';
import { fromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import * as ɵngcc0 from '@angular/core';
let DeferLoadDirective = class DeferLoadDirective {
    constructor(_element, _zone, platformId) {
        this._element = _element;
        this._zone = _zone;
        this.platformId = platformId;
        this.preRender = true;
        this.fallbackEnabled = true;
        this.removeListenersAfterLoad = true;
        this.deferLoad = new EventEmitter();
        this.checkForIntersection = (entries) => {
            entries.forEach((entry) => {
                if (this.checkIfIntersecting(entry)) {
                    this.load();
                    if (this._intersectionObserver && this._element.nativeElement) {
                        this._intersectionObserver.unobserve((this._element.nativeElement));
                    }
                }
            });
        };
        this.onScroll = () => {
            if (this.isVisible()) {
                this._zone.run(() => this.load());
            }
        };
    }
    ngOnInit() {
        if ((isPlatformServer(this.platformId) && this.preRender === true) ||
            (isPlatformBrowser(this.platformId) && this.fallbackEnabled === false && !this.hasCompatibleBrowser())) {
            this.load();
        }
    }
    ngAfterViewInit() {
        if (isPlatformBrowser(this.platformId)) {
            if (this.hasCompatibleBrowser()) {
                this.registerIntersectionObserver();
                if (this._intersectionObserver && this._element.nativeElement) {
                    this._intersectionObserver.observe((this._element.nativeElement));
                }
            }
            else if (this.fallbackEnabled === true) {
                this.addScrollListeners();
            }
        }
    }
    hasCompatibleBrowser() {
        const hasIntersectionObserver = 'IntersectionObserver' in window;
        const userAgent = window.navigator.userAgent;
        const matches = userAgent.match(/Edge\/(\d*)\./i);
        const isEdge = !!matches && matches.length > 1;
        const isEdgeVersion16OrBetter = isEdge && (!!matches && parseInt(matches[1], 10) > 15);
        return hasIntersectionObserver && (!isEdge || isEdgeVersion16OrBetter);
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    registerIntersectionObserver() {
        if (!!this._intersectionObserver) {
            return;
        }
        this._intersectionObserver = new IntersectionObserver(entries => {
            this.checkForIntersection(entries);
        }, {});
    }
    checkIfIntersecting(entry) {
        // For Samsung native browser, IO has been partially implemented where by the
        // callback fires, but entry object is empty. We will check manually.
        if (entry && entry.time) {
            return entry.isIntersecting && entry.target === this._element.nativeElement;
        }
        return this.isVisible();
    }
    load() {
        if (this.removeListenersAfterLoad) {
            this.removeListeners();
        }
        this.deferLoad.emit();
    }
    addScrollListeners() {
        if (this.isVisible()) {
            this.load();
            return;
        }
        this._zone.runOutsideAngular(() => {
            this._scrollSubscription = fromEvent(window, 'scroll')
                .pipe(debounceTime(50))
                .subscribe(this.onScroll);
        });
    }
    removeListeners() {
        if (this._scrollSubscription) {
            this._scrollSubscription.unsubscribe();
        }
        if (this._intersectionObserver) {
            this._intersectionObserver.disconnect();
        }
    }
    isVisible() {
        let scrollPosition = this.getScrollPosition();
        let elementOffset = this._element.nativeElement.getBoundingClientRect().top + (window.scrollY || window.pageYOffset);
        return elementOffset <= scrollPosition;
    }
    getScrollPosition() {
        // Getting screen size and scroll position for IE
        return (window.scrollY || window.pageYOffset)
            + (document.documentElement.clientHeight || document.body.clientHeight);
    }
};
DeferLoadDirective.ɵfac = function DeferLoadDirective_Factory(t) { return new (t || DeferLoadDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
DeferLoadDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DeferLoadDirective, selectors: [["", "deferLoad", ""]], inputs: { preRender: "preRender", fallbackEnabled: "fallbackEnabled", removeListenersAfterLoad: "removeListenersAfterLoad" }, outputs: { deferLoad: "deferLoad" } });
DeferLoadDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
tslib_1.__decorate([
    Input()
], DeferLoadDirective.prototype, "preRender", void 0);
tslib_1.__decorate([
    Input()
], DeferLoadDirective.prototype, "fallbackEnabled", void 0);
tslib_1.__decorate([
    Input()
], DeferLoadDirective.prototype, "removeListenersAfterLoad", void 0);
tslib_1.__decorate([
    Output()
], DeferLoadDirective.prototype, "deferLoad", void 0);
DeferLoadDirective = tslib_1.__decorate([ tslib_1.__param(2, Inject(PLATFORM_ID))
], DeferLoadDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DeferLoadDirective, [{
        type: Directive,
        args: [{
                selector: '[deferLoad]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { preRender: [{
            type: Input
        }], fallbackEnabled: [{
            type: Input
        }], removeListenersAfterLoad: [{
            type: Input
        }], deferLoad: [{
            type: Output
        }] }); })();
export { DeferLoadDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,